import React, { useState, useEffect } from "react"; import { Card, CardContent, Typography, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Chip, IconButton, Box, TextField, InputAdornment } from "@mui/material"; import SearchIcon from "@mui/icons-material/Search"; import RefreshIcon from "@mui/icons-material/Refresh"; import { dashboardAPI } from "../services/api"; import { Merchant } from "../types"; const MerchantList: React.FC = () => { const [merchants, setMerchants] = useState<Merchant[]>([]); const [filteredMerchants, setFilteredMerchants] = useState<Merchant[]>([]); const [searchTerm, setSearchTerm] = useState(""); const [loading, setLoading] = useState(true); const fetchMerchants = async () => { try { setLoading(true); const data = await dashboardAPI.getMerchants(); setMerchants(data.merchants || []); setFilteredMerchants(data.merchants || []); } catch (error) { console.error("Failed to fetch merchants:", error); setMerchants([]); setFilteredMerchants([]); } finally { setLoading(false); } }; useEffect(() => { fetchMerchants(); }, []); useEffect(() => { const filtered = merchants.filter(merchant => merchant.businessName?.toLowerCase().includes(searchTerm.toLowerCase()) || merchant.whatsappNumber.includes(searchTerm) ); setFilteredMerchants(filtered); }, [searchTerm, merchants]); const getStatusColor = (status: string) => { switch (status) { case "completed": return "success"; case "escalated": return "error"; case "in_progress": return "warning"; default: return "default"; } }; const getSLAColor = (slaStatus: string) => { switch (slaStatus) { case "within_sla": return "success"; case "at_risk": return "warning"; case "breached": return "error"; case "escalated": return "error"; default: return "default"; } }; if (loading) { return <Typography>Loading merchants...</Typography>; } return ( <Card> <CardContent> <Box sx={{ display: "flex", justifyContent: "space-between", alignItems: "center", mb: 3 }}> <Typography variant="h6" sx={{ fontWeight: 600 }}>Recent Merchants</Typography> <Box sx={{ display: "flex", gap: 2 }}> <TextField size="small" placeholder="Search merchants..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} InputProps={{ startAdornment: ( <InputAdornment position="start"> <SearchIcon /> </InputAdornment> ) }} /> <IconButton onClick={fetchMerchants} color="primary"> <RefreshIcon /> </IconButton> </Box> </Box> <TableContainer> <Table> <TableHead> <TableRow> <TableCell sx={{ fontWeight: 600 }}>Business Name</TableCell> <TableCell sx={{ fontWeight: 600 }}>WhatsApp</TableCell> <TableCell sx={{ fontWeight: 600 }}>Status</TableCell> <TableCell sx={{ fontWeight: 600 }}>SLA Status</TableCell> <TableCell sx={{ fontWeight: 600 }}>Go-Live Date</TableCell> <TableCell sx={{ fontWeight: 600 }}>Current Step</TableCell> </TableRow> </TableHead> <TableBody> {filteredMerchants.map((merchant) => ( <TableRow key={merchant.merchantId} hover> <TableCell>{merchant.businessName || "N/A"}</TableCell> <TableCell>{merchant.whatsappNumber}</TableCell> <TableCell> <Chip label={merchant.status} color={getStatusColor(merchant.status)} size="small" /> </TableCell> <TableCell> <Chip label={merchant.slaStatus.replace("_", " ")} color={getSLAColor(merchant.slaStatus)} size="small" /> </TableCell> <TableCell>{new Date(merchant.goLiveDate).toLocaleDateString()}</TableCell> <TableCell> <Typography variant="body2" sx={{ textTransform: "capitalize" }}> {merchant.currentStep.replace("_", " ")} </Typography> </TableCell> </TableRow> ))} </TableBody> </Table> </TableContainer> {filteredMerchants.length === 0 && ( <Box sx={{ textAlign: "center", py: 4 }}> <Typography color="text.secondary">No merchants found</Typography> </Box> )} </CardContent> </Card> ); }; export default MerchantList;
